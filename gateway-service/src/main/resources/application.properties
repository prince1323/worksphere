spring.application.name=gateway-service
server.port=8088

# Eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.instance.prefer-ip-address=true
eureka.instance.hostname=localhost
eureka.instance.instance-id=${spring.application.name}:${server.port}

# Enable serviceId-based discovery for routes (not required since we define explicit routes,
# but handy if you later want to route like http://localhost:8080/EMPLOYEE-SERVICE/**)
spring.cloud.gateway.discovery.locator.enabled=false
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Explicit routes (preserve your existing API paths)
spring.cloud.gateway.routes[0].id=employee-route
spring.cloud.gateway.routes[0].uri=lb://employee-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/employees/**

spring.cloud.gateway.routes[1].id=department-route
spring.cloud.gateway.routes[1].uri=lb://department-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/departments/**

spring.cloud.gateway.routes[2].id=project-route
spring.cloud.gateway.routes[2].uri=lb://project-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/projects/**

spring.cloud.gateway.routes[3].id=task-route
spring.cloud.gateway.routes[3].uri=lb://task-service
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/tasks/**

# CORS (adjust origins if you have a frontend)
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins=http://localhost:3000,http://localhost:5173
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedHeaders=*

# Actuator
management.endpoints.web.exposure.include=health,info
